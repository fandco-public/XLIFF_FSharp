#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

Experiments with parsing XLIFF Examples using F#

#!fsharp

open System
open System.Xml
open System.Xml.Schema

// Define a function to handle validation events
// Function to handle validation events
let validationEventHandler (e: ValidationEventArgs): unit =
    if e.Severity = XmlSeverityType.Warning then
        printfn "\nWarning: %s at line %d, position %d" e.Message e.Exception.LineNumber e.Exception.LinePosition
    elif e.Severity = XmlSeverityType.Error then
        printfn "\nError: %s at line %d, position %d" e.Message e.Exception.LineNumber e.Exception.LinePosition
    else printfn "\nValidation event: %s" e.Message
    ()

let validateXmlWithSchema (xmlPath: string) (xsdPaths: string list) =
    // Load the schema
    let schema = new XmlSchemaSet()
    for xsdPath in xsdPaths do
        schema.Add(null, xsdPath) |> ignore

    // Create a reader settings object
    let settings = new XmlReaderSettings()
    settings.Schemas <- schema
    settings.ValidationType <- ValidationType.Schema
    
    // // Add the validation event handler
    //settings.ValidationEventHandler.Add(validationEventHandler)

    // Create an XmlReader object with the settings and validate
    use reader = XmlReader.Create(xmlPath, settings)
    try
        while reader.Read() do ()  // Read through the XML document
        printfn "XML document is valid."
    with
    | :? XmlSchemaValidationException as ex ->
        printfn "Validation failed: %s" ex.Message

#!fsharp

// Example usage:
let xmlFilePath = "./Samples/v1.2/OpenPasswordGenerator.ar-SA.xlf"
let xsdFilePaths = ["./Schemas/v1.2/xliff-core-1.2-transitional.xsd"; "./Schemas/v1.2/xml.xsd"]
validateXmlWithSchema xmlFilePath xsdFilePaths
